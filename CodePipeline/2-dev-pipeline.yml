---
AWSTemplateFormatVersion: 2010-09-09
Description: >
  This template creates a CodePipeline for developers to deploy their code to. It will create a CodeCommit repository, a CodeBuild project, and a CodePipeline pipeline.

Parameters:

  CodeCommitRepositoryName:
    Type: String
    AllowedPattern: ^[a-zA-Z0-9._\-]+(?<!\.git)$
    Description: Enter a name for the CodeCommit repository to create
    ConstraintDescription: must be a valid CodeCommit repository name.

  CodeCommitRepositoryDescription:
    Type: String
    # Default: MyContainerRepo
    Description: Description of the CodeCommit repository to create
    ConstraintDescription: must be a valid CodeCommit repository description.

  ECRRepositoryName:
    Type: String
    AllowedPattern: ^[a-z0-9/-]{2,256}$
    Description: Enter a name for the ECR repository to create (must be lowercase) (e.g. mycontainerrepo)
    ConstraintDescription: >
      The ECR repository name must start with a letter and can only contain lowercase letters, numbers, hyphens, underscores, and forward slashes.

Mappings:
  env:
    prod:
      VPCName: prod-VPC-stack1
      VPCId: vpc-0f753859f4d2d23fd
      VPCCIDR: 10.20.0.0/16
      PublicSubnetACIDR: 10.20.0.0/20
      PublicSubnetBCIDR: 10.20.16.0/20
      PublicSubnetCCIDR: 10.20.32.0/20
      # ECSCLusterName: prod-ecs-cluster
      ECSCLusterName: prod-MyCluster
    dev:
      VPCName: dev-VPC-stack1
      VPCId: vpc-0f753859f4d2d23fd
      VPCCIDR: 10.10.0.0/16
      PublicSubnetACIDR: 10.10.0.0/20
      PublicSubnetBCIDR: 10.10.16.0/20
      PublicSubnetCCIDR: 10.10.32.0/20
      # ECSCLusterName: dev-ecs-cluster
      ECSCLusterName: dev-MyCluster
      SubnetIds:
        - subnet-071d9fa5a7e8b5b2a
        - subnet-0e18a162d587f1f22
        - subnet-0b99a57bc151a6459

Resources:

  CodeCommitRepository:
    Type: AWS::CodeCommit::Repository
    Properties:
      RepositoryName: !Ref CodeCommitRepositoryName
      RepositoryDescription: !Ref CodeCommitRepositoryDescription
      Tags:
        - Key: Name
          Value: !Sub "${CodeCommitRepositoryName}-${AWS::StackName}"
      Code:
        BranchName: main
        S3:
          Bucket: !Sub "dev-codepipeline-${AWS::Region}-502377582075"
          Key: "codecommit-basic-template.zip"


  # Create a ECR Repository for the images
  ECRRepository: 
    Type: AWS::ECR::Repository
    Properties: 
      RepositoryName: !Ref ECRRepositoryName
      ImageScanningConfiguration: 
        ScanOnPush: false

  TaskDefinitionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "TaskDefinitionRole-${ECRRepositoryName}-${AWS::StackName}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  # ECS Task Definition
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "${ECRRepositoryName}TaskDefinition"
      Cpu: 256
      Memory: 512
      RuntimePlatform:
        OperatingSystemFamily: LINUX
        CpuArchitecture: X86_64
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt TaskDefinitionRole.Arn
      # TaskRoleArn: !Ref TaskDefinitionRole
      ContainerDefinitions:
        - Name: !Sub "${ECRRepositoryName}Container"
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepositoryName}"
          PortMappings:
            - Name: !Sub "${ECRRepositoryName}-80-tcp"
              ContainerPort: 80
              HostPort: 80
              Protocol: tcp
              AppProtocol: http
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-create-group: true
              awslogs-group: !Sub "/ecs/${ECRRepositoryName}TaskDefinition"
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs


  BuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "CodeBuildServiceRole-${CodeCommitRepositoryName}-${AWS::StackName}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser

  BuildServicePolicy:
    Type: AWS::IAM::Policy
    DependsOn: 
      - ECRRepository
      - BuildProject
      - CodeCommitRepository
    Properties:
      PolicyName: !Sub "CodeBuildPolicy-${CodeCommitRepositoryName}-${AWS::StackName}"
      Roles: 
        - !Ref BuildServiceRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/BuildProject-${CodeCommitRepositoryName}" # CodeBuild logs
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/BuildProject-${CodeCommitRepositoryName}:*" # CodeBuild logs
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:PutObject
              - s3:GetObjectVersion
              - s3:GetBucketAcl
              - s3:GetBucketLocation
            Resource:
              - !Sub "arn:aws:s3:::codepipeline-${AWS::Region}-*" # CodePipeline artifacts bucket
          - Effect: Allow
            Action:
              - codecommit:GitPull
            Resource:
              - !Sub "arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${CodeCommitRepositoryName}" # CodeCommit repository
          - Effect: Allow
            Action:
              - codebuild:CreateReportGroup
              - codebuild:CreateReport
              - codebuild:UpdateReport
              - codebuild:BatchPutTestCases
              - codebuild:BatchPutCodeCoverages
            Resource:
              - !Sub "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:report-group/BuildProject-${CodeCommitRepositoryName}-*" # CodeBuild reports

  BuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "BuildProject-${CodeCommitRepositoryName}"
      Description: !Sub "BuildProject for ${CodeCommitRepositoryName} - Stack: ${AWS::StackName}"
      ServiceRole: !Ref BuildServiceRole
      Artifacts:
        Type: NO_ARTIFACTS
      BadgeEnabled: false
      Cache:
        Type: NO_CACHE
      Environment: # use Ubuntu standard v7
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:7.0
        ImagePullCredentialsType: CODEBUILD
        PrivilegedMode: true
      TimeoutInMinutes: 60
      QueuedTimeoutInMinutes: 480
      LogsConfig:
        CloudWatchLogs:
          Status: ENABLED
        S3Logs:
          Status: DISABLED
      Source:
        GitCloneDepth: 1
        GitSubmodulesConfig:
          FetchSubmodules: false
        Type: CODECOMMIT
        Location: !Sub "https://git-codecommit.${AWS::Region}.amazonaws.com/v1/repos/${CodeCommitRepositoryName}"
        BuildSpec: !Sub |
          version: 0.2
          phases:
            pre_build:
              commands:
                - ACCOUNT_ID=${AWS::AccountId}
                - REGION=${AWS::Region}
                - REGISTRY_URI=502377582075.dkr.ecr.$REGION.amazonaws.com
                # Fill in Docker information
                - IMAGE_NAME=${ECRRepository}
                # Fill in ECS information
                - CONTAINER_NAME=${ECRRepository}Container # TaskDefinition: container definition name (Wrapper for imageUri)
                # -----------------------
                - IMAGE=$REGISTRY_URI/$IMAGE_NAME
                - COMMIT=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-8)
                - aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin $REGISTRY_URI
            build:
              commands:
                - docker build --tag $IMAGE .
                - docker tag $IMAGE $IMAGE:$COMMIT
            post_build:
              commands:
                - docker push $IMAGE
                - docker push $IMAGE:$COMMIT
                # Create imagedefinitions.json. This is used by ECS to know which docker image to use.
                - printf '[{"name":"%s","imageUri":"%s"}]' $CONTAINER_NAME $IMAGE:$COMMIT > imagedefinitions.json
          artifacts:
            files:
              # Put imagedefinitions.json in the artifact zip file
              - imagedefinitions.json

  PipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "CodePipelineServiceRole-${AWS::Region}-${CodeCommitRepositoryName}-${AWS::StackName}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action:
              - sts:AssumeRole


  PipelineServicePolicy:
    Type: AWS::IAM::Policy
    DependsOn: 
      - ECRRepository
      - BuildProject
      - CodeCommitRepository
    Properties:
      PolicyName: !Sub "CodePipelineServicePolicy-${AWS::Region}-${CodeCommitRepositoryName}-${AWS::StackName}"
      Roles: 
        - !Ref PipelineServiceRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action:
          - iam:PassRole
          Resource: "*"
          Effect: Allow
          Condition:
            StringEqualsIfExists:
              iam:PassedToService:
              - cloudformation.amazonaws.com
              - elasticbeanstalk.amazonaws.com
              - ec2.amazonaws.com
              - ecs-tasks.amazonaws.com
        - Action:
          - codecommit:CancelUploadArchive
          - codecommit:GetBranch
          - codecommit:GetCommit
          - codecommit:GetRepository
          - codecommit:GetUploadArchiveStatus
          - codecommit:UploadArchive
          Resource: "*"
          Effect: Allow
        - Action:
          - codedeploy:CreateDeployment
          - codedeploy:GetApplication
          - codedeploy:GetApplicationRevision
          - codedeploy:GetDeployment
          - codedeploy:GetDeploymentConfig
          - codedeploy:RegisterApplicationRevision
          Resource: "*"
          Effect: Allow
        - Action:
          - codestar-connections:UseConnection
          Resource: "*"
          Effect: Allow
        - Action:
          - elasticbeanstalk:*
          - ec2:*
          - elasticloadbalancing:*
          - autoscaling:*
          - cloudwatch:*
          - s3:*
          - sns:*
          - cloudformation:*
          - rds:*
          - sqs:*
          - ecs:*
          Resource: "*"
          Effect: Allow
        - Action:
          - lambda:InvokeFunction
          - lambda:ListFunctions
          Resource: "*"
          Effect: Allow
        - Action:
          - opsworks:CreateDeployment
          - opsworks:DescribeApps
          - opsworks:DescribeCommands
          - opsworks:DescribeDeployments
          - opsworks:DescribeInstances
          - opsworks:DescribeStacks
          - opsworks:UpdateApp
          - opsworks:UpdateStack
          Resource: "*"
          Effect: Allow
        - Action:
          - cloudformation:CreateStack
          - cloudformation:DeleteStack
          - cloudformation:DescribeStacks
          - cloudformation:UpdateStack
          - cloudformation:CreateChangeSet
          - cloudformation:DeleteChangeSet
          - cloudformation:DescribeChangeSet
          - cloudformation:ExecuteChangeSet
          - cloudformation:SetStackPolicy
          - cloudformation:ValidateTemplate
          Resource: "*"
          Effect: Allow
        - Action:
          - codebuild:BatchGetBuilds
          - codebuild:StartBuild
          - codebuild:BatchGetBuildBatches
          - codebuild:StartBuildBatch
          Resource: "*"
          Effect: Allow
        - Effect: Allow
          Action:
          - devicefarm:ListProjects
          - devicefarm:ListDevicePools
          - devicefarm:GetRun
          - devicefarm:GetUpload
          - devicefarm:CreateUpload
          - devicefarm:ScheduleRun
          Resource: "*"
        - Effect: Allow
          Action:
          - servicecatalog:ListProvisioningArtifacts
          - servicecatalog:CreateProvisioningArtifact
          - servicecatalog:DescribeProvisioningArtifact
          - servicecatalog:DeleteProvisioningArtifact
          - servicecatalog:UpdateProduct
          Resource: "*"
        - Effect: Allow
          Action:
          - cloudformation:ValidateTemplate
          Resource: "*"
        - Effect: Allow
          Action:
          - ecr:DescribeImages
          Resource: "*"
        - Effect: Allow
          Action:
          - states:DescribeExecution
          - states:DescribeStateMachine
          - states:StartExecution
          Resource: "*"
        - Effect: Allow
          Action:
          - appconfig:StartDeployment
          - appconfig:StopDeployment
          - appconfig:GetDeployment
          Resource: "*"

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub "Pipeline-${CodeCommitRepositoryName}"
      RoleArn: !GetAtt PipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: "codepipeline-eu-west-1-969941146089"
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeCommit
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                RepositoryName: !Ref CodeCommitRepositoryName
                BranchName: main
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: BuildAction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
              Configuration:
                ProjectName: !Ref BuildProject
              RunOrder: 1
        # - Name: Deploy
        #   Actions:
        #     - Name: DeployAction
        #       ActionTypeId:
        #         Category: Deploy
        #         Owner: AWS
        #         Version: 1
        #         Provider: CodeDeployToECS
        #       InputArtifacts:
        #         - Name: BuildOutput
        #       Configuration:
        #         AppSpecTemplateArtifact: BuildOutput
        #         AppSpecTemplatePath: imagedefinitions.json
        #         ApplicationName: !Ref ECRRepository
        #         DeploymentGroupName: !Ref ECRRepository
        #       RunOrder: 1

  ECSServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub "Security group for ${ECRRepositoryName} ECS service"
      VpcId: !FindInMap [env, dev, VPCId]
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  # ECSServiceRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     RoleName: !Sub "ECSServiceRole-${ECRRepositoryName}-${AWS::StackName}"
  #     AssumeRolePolicyDocument:
  #       Version: "2012-10-17"
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service:
  #               - ecs.amazonaws.com
  #           Action:
  #             - sts:AssumeRole
  #     ManagedPolicyArns:
  #       - arn:aws:iam::aws:policy/aws-service-role/AmazonECSServiceRolePolicy




  # ECSServiceLinkedRole2:
  #   Type: 'AWS::IAM::ServiceLinkedRole'
  #   Properties:
  #     AWSServiceName: ecs.amazonaws.com
  #     Description: !Sub "Service linked role for ${ECRRepositoryName} ECS service"
  #     # CustomSuffix: TestSuffix


  ECSService:
    Type: AWS::ECS::Service
    Properties:
      # Role: arn:aws:iam::aws:policy/aws-service-role/AmazonECSServiceRolePolicy
      Cluster: !FindInMap [env, dev, ECSCLusterName]
      CapacityProviderStrategy:
      - CapacityProvider: FARGATE
        Base: 0
        Weight: 1
      TaskDefinition: !Ref TaskDefinition
      ServiceName: !Sub "${ECRRepositoryName}-Service"
      SchedulingStrategy: REPLICA
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref ECSServiceSecurityGroup
          Subnets: !FindInMap [env, dev, SubnetIds]
      PlatformVersion: LATEST
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 0
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      DeploymentController:
        Type: ECS
      ServiceConnectConfiguration:
        Enabled: false
      Tags: []
      EnableECSManagedTags: true

Outputs:
     CodeCommitRepositoryCloneUrlHttp:
       Description: "CodeCommit repository clone URL over HTTPS"
       Value: !Sub "https://git-codecommit.${AWS::Region}.amazonaws.com/v1/repos/${CodeCommitRepositoryName}"
