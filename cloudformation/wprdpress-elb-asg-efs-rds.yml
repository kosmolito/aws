---
AWSTemplateFormatVersion: 2010-09-09
Description: >
  Create a WordPress site with an Application Load Balancer, Auto Scaling Group, EFS, RDS.
  The WordPress site is provisioned using a Launch Template and a CloudFormation EC2 instance.
  A provisioner EC2 instance is used to provision the WordPress site, including the database setup to RDS and the EFS mount.
  The provisioner EC2 instance is terminated after the WordPress site is provisioned.
  The WordPress site is accessible via the Application Load Balancer.
  The application is decoupled from the data layer, which is stored in RDS and EFS, making it easy to scale the application layer.

Parameters:
  ParamEnvironment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
    Description: Environment to deploy to (dev or prod)
    ConstraintDescription: must be either dev or prod.

  DBInstanceIdentifier:
    Default: dbinstance
    Description: My database instance
    Type: String
    MinLength: "1"
    MaxLength: "63"
    AllowedPattern: "[a-zA-Z0-9]*[a-zA-Z0-9]*"
    ConstraintDescription: >-
      Must begin with a letter and must not end with a hyphen or contain two
      consecutive hyphens.

  DBAllocatedStorage:
    Default: "20"
    Description: The size of the database (GiB)
    Type: Number
    MinValue: "20"
    MaxValue: "120"
    ConstraintDescription: must be between 20 and 65536 GiB.

  DBName:
    Default: wordpressdb
    Description: My database
    Type: String
    MinLength: "1"
    MaxLength: "64"
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters.

  DBUsername:
    Default: "admin"
    NoEcho: "true"
    Description: Username for MySQL database access
    Type: String
    MinLength: "1"
    MaxLength: "16"
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.

  DBPassword:
    Default: "MyInsecurePassword"
    NoEcho: "true"
    Description: Password MySQL database access
    Type: String
    MinLength: "8"
    MaxLength: "41"
    AllowedPattern: "[a-zA-Z0-9]*"
    ConstraintDescription: must contain only alphanumeric characters.

  WordPressSiteTitle:
    Default: "My WordPress Site"
    Description: The title of the WordPress site
    Type: String
    MinLength: "4"
    MaxLength: "64"
    ConstraintDescription: Must be between 4 - 64 characters.

  WordPressAdminUsername:
    Default: "admin"
    Description: Username for WordPress admin access
    Type: String
    MinLength: "5"
    MaxLength: "16"
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.

  WordPressAdminPassword:
    Default: "MyInsecurePassword"
    NoEcho: "true"
    Description: Password for WordPress admin access
    Type: String
    MinLength: "8"
    MaxLength: "41"
    AllowedPattern: "[a-zA-Z0-9]*"
    ConstraintDescription: must contain only alphanumeric characters.

  WordPressAdminEmail:
    Default: "user@example.com"
    Description: Email for WordPress admin access
    Type: String
    MinLength: "5"
    MaxLength: "64"
    ConstraintDescription: must contain only alphanumeric characters.

  DBInstanceClass:
    Default: db.t3.micro
    Description: DB instance class
    Type: String
    ConstraintDescription: Must select a valid DB instance type.

  ParamAutoscalingDesiredCapacity:
    Type: Number
    Default: 2
    Description: Desired number of EC2 instances for autoscaling group

  ParamAutoscalingMaxSize:
    Type: Number
    Default: 4
    Description: Maximum number of EC2 instances for autoscaling group

  ParamAutoscalingMinSize:
    Type: Number
    Default: 1
    Description: Minimum number of EC2 instances for autoscaling group

  ParamAutoscalingScaleUpThreshold:
    Type: Number
    Default: 80
    MinValue: 50
    MaxValue: 100
    Description: CPU utilization threshold for scaling up
    ConstraintDescription: must be a number between 50 and 100.

Mappings:
  RegionMap:
    # Details for eu-west-1
    eu-west-1:
      InstanceType: t2.micro
      AMI: ami-0f3164307ee5d695a
      SSHKeyName: aws_rsa.pub
    # Details for eu-north-1
    eu-north-1:
      InstanceType: t3.micro
      AMI: ami-071df4a41c6f9ee2e
      SSHKeyName: aws_rsa.pub

Resources:

  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-VPC"
        - Key: Environment
          Value: !Sub "${AWS::StackName}-${ParamEnvironment}"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: myVPC
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-InternetGateway"
        - Key: Environment
          Value: !Sub "${AWS::StackName}-${ParamEnvironment}"

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref myVPC
      InternetGatewayId: !Ref InternetGateway

  ############################# PUBLIC SUBNETS #############################
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref AWS::Region
      VpcId: !Ref myVPC
      CidrBlock: 10.0.0.0/20
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PublicSubnetA"
        - Key: Environment
          Value: !Sub "${AWS::StackName}-${ParamEnvironment}"

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref AWS::Region
      VpcId: !Ref myVPC
      CidrBlock: 10.0.16.0/20
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PublicSubnetB"
        - Key: Environment
          Value: !Sub "${AWS::StackName}-${ParamEnvironment}"

  PublicSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 2
        - Fn::GetAZs: !Ref AWS::Region
      VpcId: !Ref myVPC
      CidrBlock: 10.0.32.0/20
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PublicSubnetC"
        - Key: Environment
          Value: !Sub "${AWS::StackName}-${ParamEnvironment}"

  ############################# ROUTE TABLES #############################
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PublicRouteTable"
        - Key: Environment
          Value: !Sub "${AWS::StackName}-${ParamEnvironment}"

  # Public route table has direct routing to IGW
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  ############################# ROUTE TABLE ASSOCIATIONS #############################
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetC
      RouteTableId: !Ref PublicRouteTable

########################## RDS ##########################
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "allow-rds-traffic"
      VpcId: !Ref myVPC

  RDSIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref RDSSecurityGroup
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      CidrIp: "0.0.0.0/0"
      # SourceSecurityGroupId: !Ref RDSSecurityGroup

  RDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Subnet group for RDS"
      SubnetIds:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
        - !Ref PublicSubnetC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-RDSSubnetGroup"
        - Key: Environment
          Value: !Sub "${AWS::StackName}${ParamEnvironment}"

  RDSInstance:
    Type: AWS::RDS::DBInstance
    DependsOn: AttachGateway
    Properties:
      DBSubnetGroupName: !Ref RDSSubnetGroup
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      DBInstanceIdentifier: !Sub "${AWS::StackName}-${DBInstanceIdentifier}"
      DBName: !Ref DBName
      DBInstanceClass: !Ref DBInstanceClass
      AllocatedStorage: !Ref DBAllocatedStorage
      Engine: MySQL
      EngineVersion: "8.0.33"
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      PubliclyAccessible: true
      DeleteAutomatedBackups: true
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete

  ########################## EFS ##########################

  # Create an EFS File System Security Group allowing NFS traffic
  EFSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "allow-efs-traffic"
      VpcId: !Ref myVPC

  EFSIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EFSSecurityGroup
      IpProtocol: tcp
      FromPort: 2049
      ToPort: 2049
      SourceSecurityGroupId: !Ref EFSSecurityGroup

  EFSFileSystem:
    Type: AWS::EFS::FileSystem
    DependsOn: AttachGateway
    DeletionPolicy: Delete
    # UpdateReplacePolicy: Delete
    Properties:
      Encrypted: true
      LifecyclePolicies:
        - TransitionToIA: AFTER_7_DAYS
        - TransitionToPrimaryStorageClass: AFTER_1_ACCESS
      FileSystemTags:
        - Key: Name
          Value: !Ref AWS::StackName
      PerformanceMode: generalPurpose
      ThroughputMode: elastic

  MountTargetResource1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SubnetId: !Ref PublicSubnetA
      SecurityGroups:
        - !Ref EFSSecurityGroup

  MountTargetResource2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SubnetId: !Ref PublicSubnetB
      SecurityGroups:
        - !Ref EFSSecurityGroup

  MountTargetResource3:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SubnetId: !Ref PublicSubnetC
      SecurityGroups:
        - !Ref EFSSecurityGroup

  ########################## APPLICATION LB ##########################

    # ELB Security Group allowing Port 80 from anywhere
  ApplicationLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security Group for Application Load Balancer"
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Environment
          Value: !Sub "${AWS::StackName}-${ParamEnvironment}"


    # Creating an Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: AttachGateway
    Properties:
      Name: !Sub "${AWS::StackName}-alb"
      Scheme: internet-facing
      Subnets: 
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
        - !Ref PublicSubnetC
      SecurityGroups:
        - !Ref ApplicationLoadBalancerSG
      Type: application
      IpAddressType: ipv4
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ApplicationLoadBalancer"
        - Key: Environment
          Value: !Sub "${AWS::StackName}-${ParamEnvironment}"

  ProvisionTemplateSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow SSH and HTTP traffic"
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Environment
          Value: !Sub "${AWS::StackName}-${ParamEnvironment}"

  # Creating a Launch Template
  ProvisionTemplate:
    Type: AWS::EC2::LaunchTemplate
    DependsOn: 
      - MountTargetResource1
      - MountTargetResource2
      - MountTargetResource3
    Properties:
      LaunchTemplateName: !Sub "${AWS::StackName}-EC2LaunchTemplate"
      LaunchTemplateData:
        ImageId:
          !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
        InstanceType: !FindInMap [RegionMap, !Ref "AWS::Region", InstanceType]
        KeyName: !FindInMap [RegionMap, !Ref "AWS::Region", SSHKeyName]
        SecurityGroupIds:
          - !Ref ProvisionTemplateSG
          - !Ref EFSSecurityGroup
          - !Ref RDSSecurityGroup
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub "${AWS::StackName}-wordpress-provision-template"
              - Key: Environment
                Value: !Sub "${AWS::StackName}-${ParamEnvironment}"
        UserData: 
          Fn::Base64: 
            Fn::Sub: 
              - |
                #!/bin/bash -xe
                yum update -y
                yum install -y httpd wget php-fpm php-mysqli php-json php php-devel amazon-efs-utils
                systemctl start httpd php-fpm
                systemctl enable httpd php-fpm
                echo "${EFSFileSystem}:/ /var/www/html/ efs _netdev,noresvport,tls 0 0" | tee -a /etc/fstab
                mount -a
                curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
                chmod +x wp-cli.phar
                sudo mv wp-cli.phar /bin/wp
                echo "Waiting 30 seconds for efs to mount..."
                sleep 30
                cd /var/www/html
                wp core download --path=/var/www/html --allow-root --force
                while [ ! -f /var/www/html/wp-config-sample.php ]; do sleep 2; done
                mv /var/www/html/wp-config-sample.php /var/www/html/wp-config.php -f
                wp core config --path="/var/www/html" --allow-root --dbhost="${RDSEndpoint}" \
                --dbname="${DBName}" --dbuser="${DBUsername}" --dbpass="${DBPassword}" --dbprefix="wp_" --force
                wp core install --allow-root --url="http://${ApplicationLoadBalancerDNS}" --title="${WordPressSiteTitle}" \
                --admin_user="${WordPressAdminUsername}" --admin_password=${WordPressAdminPassword} --admin_email="${WordPressAdminEmail}"
                chown -R apache:apache /var/www/html
                chmod -R 2755 /var/www/html
              - RDSEndpoint: !GetAtt RDSInstance.Endpoint.Address
                ApplicationLoadBalancerDNS: !GetAtt ApplicationLoadBalancer.DNSName
                EFSFileSystem: !Ref EFSFileSystem

  # Create a EC2 Based on Provision Launch Template
  WordpressProvioner:
    Type: AWS::EC2::Instance
    Properties:
      SubnetId: !Ref PublicSubnetA
      LaunchTemplate:
        LaunchTemplateId: !Ref ProvisionTemplate
        Version: !GetAtt ProvisionTemplate.LatestVersionNumber
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-wordpress-provioner"
        - Key: Environment
          Value: !Sub "${AWS::StackName}-${ParamEnvironment}"

  # EC2 Security Group Allowing Port 80 through the Load Balancer Security Group
  AutoScalingSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow SSH and HTTP access to ec2 instances"
      VpcId: !Ref myVPC
      # Security Group Ingress for SSH and HTTP
      SecurityGroupIngress:
        # HTTP access from ELB Security Group only
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId:
            Ref: ApplicationLoadBalancerSG
      Tags:
        - Key: Environment
          Value: !Sub "${AWS::StackName}-${ParamEnvironment}"

Outputs:
