---
AWSTemplateFormatVersion: 2010-09-09
Description: >
  Creating Network infrastructure and ECS Cluster for the development environment.

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
    Description: Environment to deploy to (dev or prod)
    ConstraintDescription: must be either dev or prod.

  EcsClusterName:
    Type: String
    Default: ecs-cluster
    Description: Specifies the ECS Cluster Name with which the resources would be associated

Mappings:
  Env:
    prod:
      VpcCIDR: 10.20.0.0/16
      PublicSubnetACIDR: 10.20.0.0/20
      PublicSubnetBCIDR: 10.20.16.0/20
      PublicSubnetCCIDR: 10.20.32.0/20
    dev:
      VpcCIDR: 10.10.0.0/16
      PublicSubnetACIDR: 10.10.0.0/20
      PublicSubnetBCIDR: 10.10.16.0/20
      PublicSubnetCCIDR: 10.10.32.0/20

Conditions:
  IsNotProd: !Not [!Equals [!Ref Environment, prod]]

Resources:
  ############################# VPC #############################
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap [Env, !Ref Environment, VpcCIDR]
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-vpc"
        - Key: Environment
          Value: !Sub "${Environment}"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: Vpc
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-igw"
        - Key: Environment
          Value: !Sub "${Environment}"

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway

  ############################# PUBLIC SUBNETS #############################
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref AWS::Region
      VpcId: !Ref Vpc
      CidrBlock: !FindInMap [Env, !Ref Environment, PublicSubnetACIDR]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-PublicSubnetA"
        - Key: Environment
          Value: !Sub "${Environment}"

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref AWS::Region
      VpcId: !Ref Vpc
      CidrBlock: !FindInMap [Env, !Ref Environment, PublicSubnetBCIDR]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-PublicSubnetB"
        - Key: Environment
          Value: !Sub "${Environment}"

  PublicSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 2
        - Fn::GetAZs: !Ref AWS::Region
      VpcId: !Ref Vpc
      CidrBlock: !FindInMap [Env, !Ref Environment, PublicSubnetCCIDR]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-PublicSubnetC"
        - Key: Environment
          Value: !Sub "${Environment}"

  ############################# ROUTE TABLES #############################
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-PublicRouteTable"
        - Key: Environment
          Value: !Sub "${Environment}"

  # Public route table has direct routing to IGW
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  ############################# ROUTE TABLE ASSOCIATIONS #############################
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable

  publicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetC
      RouteTableId: !Ref PublicRouteTable


  ############################ ECS CLUSTER #############################

  SshSecurityGroup:
    Condition: IsNotProd
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SSH Security Group
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  EcsHTTPServiceSecurityGroup:
    Condition: IsNotProd
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS HTTP Service Security Group
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${Environment}-${EcsClusterName}"
      CapacityProviders:
      - FARGATE
      - FARGATE_SPOT
      ClusterSettings:
      - Name: containerInsights
        Value: disabled
      Configuration:
        ExecuteCommandConfiguration:
          Logging: DEFAULT
      ServiceConnectDefaults:
        Namespace: !Ref EcsClusterName
      Tags: 
        - Key: Name
          Value: !Sub "${Environment}-${EcsClusterName}"
        - Key: Environment
          Value: !Sub "${Environment}"

  StackResourceGroup:
    Type: "AWS::ResourceGroups::Group" 
    Properties: 
      Name: !Sub "${Environment}-stackResourceGroup"
      Description: "Resource group for the stack" 
      ResourceQuery: 
        Type: "CLOUDFORMATION_STACK_1_0"
      Tags:
        - Key: Type
          Value: "ResourceGroup"
        - Key: Environment
          Value: !Sub "${Environment}"
        - Key: Name
          Value: !Sub "${Environment}-ResourceGroup"

Outputs:
  VpcId:
    Value: !Ref Vpc
    Export:
      Name: !Sub "${Environment}-VpcId"

  PublicSubnetA:
    Value: !Ref PublicSubnetA
    Export:
      Name: !Sub "${Environment}-PublicSubnetA"

  PublicSubnetB:
    Value: !Ref PublicSubnetB
    Export:
      Name: !Sub "${Environment}-PublicSubnetB"

  PublicSubnetC:
    Value: !Ref PublicSubnetC
    Export:
      Name: !Sub "${Environment}-PublicSubnetC"

  HttpSecurityGroup:
    Condition: IsNotProd
    Value: !Ref EcsHTTPServiceSecurityGroup
    Export:
      Name: !Sub "${Environment}-HttpSecurityGroup"

  SshSecurityGroup:
    Condition: IsNotProd
    Value: !Ref SshSecurityGroup
    Export:
      Name: !Sub "${Environment}-SshSecurityGroup"

  ArtifactBucket:
    Condition: IsNotProd
    Value: cloudformation-stack-bucket-campus
    Export:
      Name: "ArtifactBucket"

  EcsCluster:
    Value: !Ref EcsCluster
    Export:
      Name: !Sub "${Environment}-EcsCluster"

  AccountId:
    Value: !Ref AWS::AccountId
    Export:
      Name: !Sub "${Environment}-AccountId"